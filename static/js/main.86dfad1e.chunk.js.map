{"version":3,"sources":["Form.js","TodoLists.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addTodo","edit","useState","input","setInput","handleSubmit","e","preventDefault","id","Math","floor","random","text","handleChange","target","value","InputGroup","size","className","onSubmit","FormControl","placeholder","aria-label","onChange","Append","Button","variant","onClick","TodoLists","todoList","setTodoList","setEdit","Checkbox","defaultChecked","type","class","useEffect","json","localStorage","getItem","loadedTodo","JSON","parse","filter","todo","isComplete","console","log","stringify","setItem","Container","fluid","map","newTodo","index","updatedTodoList","completeTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86dfad1e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, InputGroup, FormControl } from \"react-bootstrap\";\nimport { FcAddRow } from \"react-icons/fc\";\nimport { AiOutlineEnter } from \"react-icons/ai\";\n\nfunction Form({ addTodo, edit }) {\n  const [input, setInput] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addTodo({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  return edit ? (\n    <InputGroup size=\"lg\" className=\"inputForm\" onSubmit={handleSubmit}>\n      <FormControl\n        placeholder=\"Edit ToDo\"\n        aria-label=\"Edit ToDo\"\n        value={input}\n        onChange={handleChange}\n      />\n      <InputGroup.Append>\n        <Button variant=\"success\" onClick={handleSubmit}>\n          <AiOutlineEnter className=\"svg\" />\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  ) : (\n    <InputGroup size=\"lg\" className=\"inputForm\" onSubmit={handleSubmit}>\n      <FormControl\n        placeholder=\"Add ToDo\"\n        aria-label=\"Add ToDo\"\n        value={input}\n        onChange={handleChange}\n      />\n      <InputGroup.Append>\n        <Button variant=\"primary\" onClick={handleSubmit}>\n          <FcAddRow className=\"addRow\" />\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n}\n\nexport default Form;\n","import Form from \"./Form\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n\nfunction TodoLists() {\n  const [todoList, setTodoList] = useState([]);\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n  });\n  const Checkbox = ({ onClick, defaultChecked }) => (\n    <input\n      type=\"checkbox\"\n      class=\"option-input checkbox\"\n      onClick={onClick}\n      defaultChecked={defaultChecked}\n    />\n  );\n\n  //call todoList from local storage\n  useEffect(() => {\n    const json = localStorage.getItem(\"todo\");\n    const loadedTodo = JSON.parse(json);\n    if (loadedTodo) {\n      setTodoList(loadedTodo.filter((todo) => todo.isComplete !== true));\n    }\n    console.log(\"Data called\");\n  }, []);\n\n  //set todoList to local storage\n  useEffect(() => {\n    const json = JSON.stringify(todoList);\n    localStorage.setItem(\"todo\", json);\n    console.log(\"Data saved\");\n  }, [todoList]);\n\n  //add a new todo task\n  const addTodo = (newTodo) => {\n    if (!newTodo.text) {\n      return;\n    }\n\n    setTodoList([newTodo, ...todoList]);\n    console.log(\"addTodo\");\n  };\n\n  // remove a todo task\n  const removeTodo = (id) => {\n    setTodoList([...todoList].filter((todo) => todo.id !== id));\n    console.log(\"removeTodo\");\n  };\n\n  // check a completed task which is selected\n  const completeTodo = (id) => {\n    let updatedTodoList = todoList.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodoList(updatedTodoList);\n    console.log(\"completeTodo\");\n  };\n\n  // update a todo task\n  const updateTodo = (input) => {\n    if (!input) {\n      return;\n    }\n\n    setTodoList(todoList.map((todo) => (todo.id === edit.id ? input : todo)));\n    console.log(\"updateTodo\");\n\n    setEdit({\n      id: null,\n      value: \"\",\n    });\n  };\n\n  // call form when edit.id !== null\n  if (edit.id) {\n    return (\n      <Container className=\"Container\" fluid=\"sm\">\n        <Form edit={edit} addTodo={updateTodo} />\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"Container\" fluid=\"sm\">\n      <Form addTodo={addTodo} />\n\n      {todoList.map((todo, index) => (\n        <div className=\"container\" key={index}>\n          <div className=\"list-container\">\n            <Checkbox\n              onClick={() => {\n                completeTodo(todo.id);\n              }}\n              defaultChecked={todo.isComplete}\n            />\n\n            <div className=\"list\" key={todo.id}>\n              {todo.text}\n            </div>\n          </div>\n\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              setEdit({ id: todo.id, value: todo.text });\n            }}\n          >\n            <AiOutlineEdit className=\"svg\" />\n          </Button>\n\n          <Button\n            variant=\"danger\"\n            onClick={() => removeTodo(todo.id)}\n            className=\"removeButton\"\n            size=\"lg\"\n          >\n            <AiFillDelete className=\"svg\" />\n          </Button>\n        </div>\n      ))}\n    </Container>\n  );\n}\n\nexport default TodoLists;\n\n{\n  /* <ListGroup>\n\n{todoList.map((todo, index) => (\n  <ListGroup.Item variant=\"primary\" className=\"container\" key={index}>\n        <div >\n          <Checkbox\n            onClick={() => {\n              completeTodo(todo.id);\n            }}\n            defaultChecked={todo.isComplete}\n          />\n\n          <div className=\"list\" key={todo.id}>\n            {todo.text}\n          </div>\n\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              setEdit({ id: todo.id, value: todo.text });\n            }}\n          >\n            Edit\n          </Button>\n\n          <Button\n            variant=\"danger\"\n            onClick={() => removeTodo(todo.id)}\n            className=\"removeButton\"\n          >\n            X\n          </Button>\n        </div>\n        </ListGroup.Item>\n      ))}\n</ListGroup>; */\n}\n","import \"./App.css\";\nimport TodoLists from \"./TodoLists\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>React ToDoList</h1>\n      <TodoLists />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}