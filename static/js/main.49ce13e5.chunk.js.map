{"version":3,"sources":["Form.js","TodoLists.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addTodo","edit","useState","input","setInput","handleSubmit","e","preventDefault","id","Math","floor","random","text","handleChange","target","value","onSubmit","onChange","Button","variant","onClick","TodoLists","todoList","setTodoList","setEdit","Checkbox","defaultChecked","type","class","useEffect","json","localStorage","getItem","loadedTodo","JSON","parse","filter","todo","isComplete","console","log","stringify","setItem","map","className","newTodo","index","updatedTodoList","completeTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAuCeA,MApCf,YAAkC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KACvB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAACC,GACpBA,EAAEC,iBACFP,EAAQ,CACNQ,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMT,KAIJU,EAAe,SAACP,GACpBF,EAASE,EAAEQ,OAAOC,QAGpB,OAAOd,EACL,uBAAMe,SAAUX,EAAhB,UACE,gCACE,uBAAOU,MAAOZ,EAAOc,SAAUJ,MAEjC,cAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASf,EAAnC,0BAKF,uBAAMW,SAAUX,EAAhB,UACE,gCACE,uBAAOU,MAAOZ,EAAOc,SAAUJ,MAEjC,cAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASf,EAAnC,0BC2FSgB,MAvHf,WACE,MAAgCnB,mBAAS,IAAzC,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,EAAwBrB,mBAAS,CAC/BM,GAAI,KACJO,MAAO,KAFT,mBAAOd,EAAP,KAAauB,EAAb,KAIMC,EAAW,SAAC,GAAD,IAAGL,EAAH,EAAGA,QAASM,EAAZ,EAAYA,eAAZ,OACf,uBACEC,KAAK,WACLC,MAAM,wBACNR,QAASA,EACTM,eAAgBA,KAiEpB,OA5DAG,qBAAU,WACR,IAAMC,EAAOC,aAAaC,QAAQ,QAC5BC,EAAaC,KAAKC,MAAML,GAC1BG,GACFV,EAAYU,EAAWG,QAAO,SAACC,GAAD,OAA8B,IAApBA,EAAKC,eAE/CC,QAAQC,IAAI,iBACX,IAGHX,qBAAU,WACR,IAAMC,EAAOI,KAAKO,UAAUnB,GAC5BS,aAAaW,QAAQ,OAAQZ,GAC7BS,QAAQC,IAAI,gBACX,CAAClB,IA8CArB,EAAKO,GACA,cAAC,EAAD,CAAMP,KAAMA,EAAMD,QAhBR,SAACG,GACbA,IAILoB,EAAYD,EAASqB,KAAI,SAACN,GAAD,OAAWA,EAAK7B,KAAOP,EAAKO,GAAKL,EAAQkC,MAClEE,QAAQC,IAAI,cAEZhB,EAAQ,CACNhB,GAAI,KACJO,MAAO,SAUT,sBAAK6B,UAAU,eAAf,UACE,cAAC,EAAD,CAAM5C,QAjDM,SAAC6C,GACVA,EAAQjC,OAIbW,EAAY,CAACsB,GAAF,mBAAcvB,KACzBiB,QAAQC,IAAI,eA6CTlB,EAASqB,KAAI,SAACN,EAAMS,GAAP,OACZ,sBAAKF,UAAU,YAAf,UACE,cAACnB,EAAD,CACEL,QAAS,YAtCE,SAACZ,GACpB,IAAIuC,EAAkBzB,EAASqB,KAAI,SAACN,GAIlC,OAHIA,EAAK7B,KAAOA,IACd6B,EAAKC,YAAcD,EAAKC,YAEnBD,KAETd,EAAYwB,GACZR,QAAQC,IAAI,gBA+BFQ,CAAaX,EAAK7B,KAEpBkB,eAAgBW,EAAKC,aAGvB,qBAAKM,UAAU,OAAf,SACGP,EAAKzB,MADmByB,EAAK7B,IAIhC,cAACU,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACPI,EAAQ,CAAEhB,GAAI6B,EAAK7B,GAAIO,MAAOsB,EAAKzB,QAHvC,kBASA,cAACM,EAAA,EAAD,CACEC,QAAQ,SACRC,QAAS,kBAjECZ,EAiEgB6B,EAAK7B,GAhEvCe,EAAY,YAAID,GAAUc,QAAO,SAACC,GAAD,OAAUA,EAAK7B,KAAOA,WACvD+B,QAAQC,IAAI,cAFK,IAAChC,GAkEVoC,UAAU,eAHZ,iBArB8BE,U,MC5EzBG,MATf,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,QCISM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49ce13e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nfunction Form({ addTodo, edit }) {\n  const [input, setInput] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addTodo({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  return edit ? (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input value={input} onChange={handleChange} />\n      </label>\n      <Button variant=\"primary\" onClick={handleSubmit}>\n        Edit todo\n      </Button>\n    </form>\n  ) : (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input value={input} onChange={handleChange} />\n      </label>\n      <Button variant=\"primary\" onClick={handleSubmit}>\n        Add todo\n      </Button>\n    </form>\n  );\n}\n\nexport default Form;\n","import Form from \"./Form\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nfunction TodoLists() {\n  const [todoList, setTodoList] = useState([]);\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n  });\n  const Checkbox = ({ onClick, defaultChecked }) => (\n    <input\n      type=\"checkbox\"\n      class=\"option-input checkbox\"\n      onClick={onClick}\n      defaultChecked={defaultChecked}\n    />\n  );\n\n  //call todoList from local storage\n  useEffect(() => {\n    const json = localStorage.getItem(\"todo\");\n    const loadedTodo = JSON.parse(json);\n    if (loadedTodo) {\n      setTodoList(loadedTodo.filter((todo) => todo.isComplete !== true));\n    }\n    console.log(\"Data called\");\n  }, []);\n\n  //set todoList to local storage\n  useEffect(() => {\n    const json = JSON.stringify(todoList);\n    localStorage.setItem(\"todo\", json);\n    console.log(\"Data saved\");\n  }, [todoList]);\n\n  //add a new todo task\n  const addTodo = (newTodo) => {\n    if (!newTodo.text) {\n      return;\n    }\n\n    setTodoList([newTodo, ...todoList]);\n    console.log(\"addTodo\");\n  };\n\n  // remove a todo task\n  const removeTodo = (id) => {\n    setTodoList([...todoList].filter((todo) => todo.id !== id));\n    console.log(\"removeTodo\");\n  };\n\n  // check a completed task which is selected\n  const completeTodo = (id) => {\n    let updatedTodoList = todoList.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodoList(updatedTodoList);\n    console.log(\"completeTodo\");\n  };\n\n  // update a todo task\n  const updateTodo = (input) => {\n    if (!input) {\n      return;\n    }\n\n    setTodoList(todoList.map((todo) => (todo.id === edit.id ? input : todo)));\n    console.log(\"updateTodo\");\n\n    setEdit({\n      id: null,\n      value: \"\",\n    });\n  };\n\n  // call form when edit.id !== null\n  if (edit.id) {\n    return <Form edit={edit} addTodo={updateTodo} />;\n  }\n\n  return (\n    <div className=\"containerAll\">\n      <Form addTodo={addTodo} />\n\n      {todoList.map((todo, index) => (\n        <div className=\"container\" key={index}>\n          <Checkbox\n            onClick={() => {\n              completeTodo(todo.id);\n            }}\n            defaultChecked={todo.isComplete}\n          />\n\n          <div className=\"list\" key={todo.id}>\n            {todo.text}\n          </div>\n\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              setEdit({ id: todo.id, value: todo.text });\n            }}\n          >\n            Edit\n          </Button>\n\n          <Button\n            variant=\"danger\"\n            onClick={() => removeTodo(todo.id)}\n            className=\"removeButton\"\n          >\n            X\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default TodoLists;\n","import \"./App.css\";\nimport TodoLists from \"./TodoLists\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>React ToDoList</h1>\n      <TodoLists />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}